{% extends 'layout.html.twig' %}

{% block title %}
    Participant
    {{ participant.code }}
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/index.css') }}">
{% endblock %}

{% form_theme form _self %}

{% block form_label %}
    {% if label is not same as(false) %}
        {% if not compound %}
            {% set label_attr = label_attr|merge({'for': id}) %}
        {% endif %}
        {% if required %}
            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
        {% endif %}
        {% if label is empty %}
            {% if label_format is not empty %}
                {% set label = label_format|replace({
                    '%name%': name,
                    '%id%': id,
                }) %}
            {% else %}
                {% set label = name|humanize %}
            {% endif %}
        {% endif %}
        <{{element|default('label')}}{%with{attr:label_attr}%}{{block('attributes')}}{%endwith%}{%endif%} {% if label_attr %}>
            <span></span>
            {{ label }}
        </{{element|default('label')}}>
    {% endif %}

{% endblock form_label %}

{% block choice_widget_expanded %}
    <div {{ block('widget_container_attributes') }}>
        {% for child in form %}
            <div class="radio-container">
                {{ form_widget(child) }}
                {{ form_label(child, null, {translation_domain: choice_translation_domain}) }}
            </div>
        {% endfor %}
    </div>
{% endblock choice_widget_expanded %}

{% block _qcm_question_widget -%}
    <div class="wrap-input">
        {% if compound %}
            {{ block('form_widget_compound') }}
        {% else %}
            {{ block('form_widget_simple') }}
        {% endif %}
        <span class="focus-input"></span>
    </div>
{% endblock _qcm_question_widget %}

{% block form_row %}
    {% set widget_attr = {} %}
    {% if help is not empty %}
        {% set widget_attr = {attr: {'aria-describedby': id ~"_help"}} %}
    {% endif %}
    <div class="wrap-input" {% with {attr: row_attr|default({} )} %} {{ block('attributes') }} {% endwith %}>
        {{ form_label(form) }}
        {{ form_errors(form) }}
        {{ form_widget(form, widget_attr) }}
        {{ form_help(form) }}
        <span class="focus-input"></span>
    </div>
{% endblock form_row %}

{% block page_content %}

    <div class="container-form">
        {{ form_start(form, {'attr': {'class': 'form validate-form', 'autocomplete' : 'off'} }) }}
        {{ form_errors(form) }}
        <!-- Hero -->
        <section class="hero-tabs">
            <h1>PARTICIPANT</h1>
            <h3>{{ participant.code }}</h3>
            <div class="hero-tabs-container">
                <a class="hero-tab" href="#tab-verification">Vérification des critères d'éligibilité</a>
                <a class="hero-tab" href="#tab-donnees">Données cardiovasculaires</a>
                <a class="hero-tab" href="#tab-informations">Information sur l'évênement cardiovasculaire</a>
                <a class="hero-tab" href="#tab-evenement">Données à 6 mois de l'évênement</a>
                <a class="hero-tab" href="#tab-deces">Fiche décès</a>
                <span class="hero-tab-slider"></span>
            </div>
        </section>

        <!-- Main -->
        <main class="main">
            <section class="slide" id="tab-verification">
                <h1>Vérification des critères d'éligibilité</h1>

                <h3>Critères d'inclusion</h3>
                {% for pack in form.verification.inclusion.qcm %}
                    <div class="qcm-row">
                        <div class="qcm-question">
                            {{ form_widget(pack.question, {'attr': {'class': 'input'} }) }}
                        </div>
                        <div class="qcm-response">
                            <div class="wrap-input">
                                {{ form_widget(pack.reponse, {'attr': {'class': 'input radio-row'} }) }}
                            </div>
                        </div>
                    </div>
                {% endfor %}
                
                <h3>Critères de non inclusion</h3>
                {% for qcm in form.verification.non_inclusion.qcm %}
                    <div class="qcm-row">
                        <div class="qcm-question">
                            {{ form_widget(qcm.question, {'attr': {'class': 'input'} }) }}
                        </div>
                        <div class="qcm-response">
                            <div class="wrap-input">
                                {{ form_widget(qcm.reponse, {'attr': {'class': 'input radio-row'} }) }}
                            </div>
                        </div>
                    </div>
                {% endfor %}

                <div class="form-space">
                    {{ form_row(form.verification.age, {'attr': {'class': 'input', 'autocomplete' : 'off'} }) }}
                    {{ form_row(form.verification.sexe, {'attr': {'class': 'input radio-row', 'autocomplete' : 'off'} }) }}
                    {{ form_row(form.verification.date_naissance, {'attr': {'class': 'input', 'autocomplete' : 'off'} }) }}
                    {{ form_row(form.verification.taille, {'attr': {'class': 'input', 'autocomplete' : 'off'} }) }}
                    {{ form_row(form.verification.poids, {'attr': {'class': 'input', 'autocomplete' : 'off'} }) }}
                    {{ form_row(form.verification.imc, {'attr': {'class': 'input', 'autocomplete' : 'off'} }) }}
                    {{ form_row(form.verification.systolique, {'attr': {'class': 'input', 'autocomplete' : 'off'} }) }}
                    {{ form_row(form.verification.diastolique, {'attr': {'class': 'input', 'autocomplete' : 'off'} }) }}
                </div>

            </section>
            <section class="slide" id="tab-donnees">
                <h1>Flexbox</h1>
                <h3>something about flexbox</h3>
            </section>
            <section class="slide" id="tab-informations">
                <h1>React</h1>
                <h3>something about react</h3>
            </section>
            <section class="slide" id="tab-evenement">
                <h1>Angular</h1>
                <h3>something about angular</h3>
            </section>
            <section class="slide" id="tab-deces">
                <h1>Other</h1>
                <h3>something about other</h3>
            </section>
        </main>

        {{ form_row(form._token) }}
        {{ form_end(form, {'render_rest' : false}) }}
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        $('ul li').on('click', function() {
            $('li').removeClass('active');
            $(this).addClass('active');
        });
    </script>

    <script>
        class StickyNavigation {
            
            constructor() {
                this.currentId = null;
                this.currentTab = null;
                this.tabContainerHeight = 70;
                this.navbar =  80;
                let self = this;
                $('.hero-tab').click(function() { 
                    self.onTabClick(event, $(this)); 
                });
                $(window).scroll(() => { this.onScroll(); });
                $(window).resize(() => { this.onResize(); });
            }
            
            onTabClick(event, element) {
                event.preventDefault();
                let scrollTop = $(element.attr('href')).offset().top - this.tabContainerHeight + 1;
                $('html, body').animate({ scrollTop: scrollTop }, 600);
            }
            
            onScroll() {
                this.checkTabContainerPosition();
                this.findCurrentTabSelector();
            }
            
            onResize() {
                if(this.currentId) {
                    this.setSliderCss();
                }
            }
            
            checkTabContainerPosition() {
                let offset = $('.hero-tabs').offset().top + $('.hero-tabs').height() - this.tabContainerHeight;
                if($(window).scrollTop() > offset)
                    $('.hero-tabs-container').addClass('hero-tabs-container--top');
                else
                    $('.hero-tabs-container').removeClass('hero-tabs-container--top');
            }
            
            findCurrentTabSelector(element) {
                let newCurrentId;
                let newCurrentTab;
                let self = this;
                $('.hero-tab').each(function() {
                    let id = $(this).attr('href');
                    let offsetTop = $(id).offset().top - self.tabContainerHeight;
                    let offsetBottom = $(id).offset().top + $(id).height() - self.tabContainerHeight;
                    if($(window).scrollTop() > offsetTop && $(window).scrollTop() < offsetBottom) {
                        newCurrentId = id;
                        newCurrentTab = $(this);
                    }
                });
                if(this.currentId != newCurrentId || this.currentId === null) {
                    this.currentId = newCurrentId;
                    this.currentTab = newCurrentTab;
                    this.setSliderCss();
                }
            }
            
            setSliderCss() {
                let width = 0;
                let left = 0;
                if(this.currentTab) {
                    width = this.currentTab.css('width');
                    left = this.currentTab.offset().left - this.navbar;
                }
                $('.hero-tab-slider').css('width', width);
                $('.hero-tab-slider').css('left', left);
            }
            
        }

        new StickyNavigation();
    </script>
{% endblock %}